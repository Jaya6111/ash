package com.rs.app.user;

import static org.junit.Assert.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

import java.util.Set;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.rs.app.bean.User;
import com.rs.app.controllers.UserController;
import com.rs.app.repositories.MyBooksRepository;
import com.rs.app.repositories.UserRepository;
import com.rs.app.request.LoginRequest;
import com.rs.app.service.impl.UserServiceImpl;

@ExtendWith(MockitoExtension.class)
public class LoginTest {

	@Mock
	private UserRepository userRepository;

	@Mock
	private MyBooksRepository myBooksRepository;

	@Mock
	UserServiceImpl userService;

	@InjectMocks
	private UserController userController;

	@Test
	public void testLoginSuccess() {
		LoginRequest request = new LoginRequest();
		User user = new User();
		String response = "login successful...";

		when(userService.login(any())).thenReturn(user);

		String loginResponse = userController.login(request);
		assertEquals(response, loginResponse);

	}

	@Test
	public void testLoginFailure() {
		LoginRequest request = new LoginRequest();
		User user = null;
		String response = "username/password not matching... try again";

		when(userService.login(any())).thenReturn(user);

		String loginResponse = userController.login(request);
		assertEquals(response, loginResponse);

	}

}
