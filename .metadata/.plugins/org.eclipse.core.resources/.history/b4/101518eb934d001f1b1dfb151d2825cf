package com.as.spring.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.as.spring.entity.PracticeUser;
import com.as.spring.entity.User;
import com.as.spring.kafka.KafkaListner;

@Controller
public class ControllerDemo {

	/*
	 * @Autowired private UserRepository repo;
	 */
	@Autowired
	private PasswordEncoder passwordEncoder;

	/*
	 * @Autowired private RestTemplate restTemplate;
	 */

	@Autowired
	private KafkaTemplate<String, Object> kafkaTemplate;

	@Autowired
	private KafkaListner kafkaListner;

	@GetMapping("/login")
	public String loginPage() {

		return "Login";
	}

	// @RequestMapping(value = "/register", method = RequestMethod.GET, produces =
	// MediaType.APPLICATION_XHTML_XML_VALUE)
	@GetMapping("/register")
	public String register(Model model) {
		model.addAttribute("user", new User());
		return "Registration";
	}

	// @RequestMapping(value = "/dashboard", method = RequestMethod.GET, produces =
	// MediaType.APPLICATION_XHTML_XML_VALUE)
	@GetMapping("/dashboard")
	public String dashboard() {
		return "Dashboard";
	}

	@PostMapping("/save")
	public String save(@ModelAttribute User user) {
		String encodedPassword = passwordEncoder.encode(user.getPassword());
		user.setPassword(encodedPassword);
		user.setEmailVerified("N");
		user.setCreatedDate(new Date().toString());
		repo.save(user);
		return "redirect:/login";
	}

	@GetMapping("/getPracticeUser/{id}")
	public String getPracticeUser(@PathVariable int id, Model model) {

		// return restTemplate.getForObject("http://localhost:8080/user/getUser/" + id,
		// String.class);
		kafkaTemplate.send("singleUser", "singleUser" + "-" + id);
		PracticeUser user = new PracticeUser();
		try {
			user = kafkaListner.singleUser();
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			e.printStackTrace();
		}
		List<PracticeUser> users = new ArrayList<PracticeUser>();
		users.add(user);
		model.addAttribute("users", users);
		return "PracticeUsers";
	}

	@DeleteMapping("/deletePracticeUser/{id}")
	public String deletePracticeUser(@PathVariable int id, Model model) {

		// return restTemplate.getForObject("http://localhost:8080/user/getUser/" + id,
		// String.class);
		kafkaTemplate.send("deleteUser", "deleteUser" + "-" + id);
		String message = null;
		try {
			message = kafkaListner.deletedUser();
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			e.printStackTrace();
		}

		model.addAttribute("message", message);
		return "DeletionSuccess";
	}

	@GetMapping("/getAll")
	public String getAll(Model model) {
		/*
		 * ResponseEntity<List<PracticeUser>> response = restTemplate.exchange(
		 * "http://localhost:8080/user/getAll", HttpMethod.GET, null, new
		 * ParameterizedTypeReference<List<PracticeUser>>() {} );
		 */
		// List<PracticeUser> users = response.getBody();
		// model.addAttribute("users", users);
		kafkaTemplate.send("allUsers", "allUsers");

		List<PracticeUser> users = new ArrayList<PracticeUser>();
		try {
			users = kafkaListner.allUsers();
		} catch (InterruptedException e) {
			Thread.currentThread().interrupt();
			e.printStackTrace();
		}

		model.addAttribute("users", users);

		return "PracticeUsers";
	}
	

}
